datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  empresa       Empresa?    @relation(fields: [empresaId], references: [id])
  empresaId     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Empresa {
  id           String     @id @default(cuid())
  nome         String
  usuarios     User[]
  wppConfig    WppConfig?
  campaigns  Campaign[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}
 
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  @@id([identifier, token])
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WppConfig {
  id        String   @id @default(cuid())
  urlApi    String
  apiKey    String
  empresa   Empresa  @relation(fields: [empresaId], references: [id])
  empresaId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Campaign {
  id          String    @id @default(cuid())
  name        String
  duration    Int
  repeat      Boolean?
  startDate   DateTime?
  endDate     DateTime?
  wppInstance String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  empresa     Empresa? @relation(fields: [empresaId], references: [id])
  empresaId   String?
}